(assoc nil :foo :bar)
(dev)
(in-ns 'user)
(dev)
boot.pod
(in-ns 'user)
dev
(dev)
(go)
(dev)
(go)
(throw (Exception. "fooo"))
dev
(dev)
(go)
java.lang.RuntimeException: Unable to resolve symbol: cljs-env in this context
(pod/get-classpath)
(clojure.pprint/pprint (pod/get-classpath))
(dev)
dev
(dev)
(in-ns 'boot.user)
(pod/get-pods)
(pod/get-pods #".*")
(pod/get-classpath)
(filter #(re-matches #".*" %) (pod/get-classpath))
(filter #(re-matches #"edge" %) (pod/get-classpath))
(filter #(re-matches #".*edge.*" %) (pod/get-classpath))
(filter #(re-matches #".*bidi.*" %) (pod/get-classpath))
(filter #(re-matches #".*juxt.*" %) (pod/get-classpath))
(dev)
(in-ns 'boot.user)
(with-env {:dependencies '[[bidi "1.24.0"]]} (let [p (pod/make-pod (get-env))] (pod/with-eval-in p (clojure-version))))
(with-env {:dependencies '[[bidi "1.24.0"]]} (let [p (pod/make-pod (get-env))] (pod/with-eval-in p bidi.core/path-for)))
(with-env {:dependencies '[[org.clojure/clojure "1.2.0"]]} (let [p (pod/make-pod (get-env))] (pod/with-eval-in p bidi.core/path-for)))
(with-env {:dependencies '[[org.clojure/clojure "1.4.0"]]} (let [p (pod/make-pod (get-env))] (pod/with-eval-in p (clojure-version)))
(with-env {:dependencies '[[org.clojure/clojure "1.4.0"]]} (let [p (pod/make-pod (get-env))] (pod/with-eval-in p (clojure-version))))
(with-env {:dependencies '[[org.clojure/clojure "1.8.0"]]} (let [p (pod/make-pod (get-env))] (pod/with-eval-in p (clojure-version))))
(with-env {:dependencies '[[bidi "0.11111.0"]]} (let [p (pod/make-pod (get-env))] (pod/with-eval-in p (clojure-version))))
(with-env {:dependencies '[[bidi "1.24.0"]]} (let [p (pod/make-pod (get-env))] (pod/with-eval-in p (clojure-version))))
(with-env {:dependencies '[[hiccup "1.0.5"]]} (let [p (pod/make-pod (get-env))] (pod/with-eval-in p (hiccup.core/html [:div]))))
(with-env {:dependencies '[[hiccup "1.0.5"]]} (let [p (pod/make-pod (get-env))] (pod/with-eval-in p (require 'hiccup.core) (hiccup.core/html [:div]))))
(in-ns 'dev)
dev
bidi
(dev)
(require 'bidi.bidi)
(in-ns 'boot.user)
(require 'bidi.bidi)
(pod/get-classpath)
(filter #(re-matches #".*bidi.*" %) (pod/get-classpath))
(filter #(re-matches #".*log.*" %) (pod/get-classpath))
(dev)
(go)
(start-repl)
(dev0
(dev)
(go)
(start-repl)
(js/alert "hi")
